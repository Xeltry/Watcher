import os
import time
import json
from datetime import datetime
from typing import Dict

import httpx
from bs4 import BeautifulSoup

URL = "https://minsk.gov.by/ru/freepage/other/arendnoe_zhiljo/"

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
CHAT_ID = os.getenv("CHAT_ID", "")
DATA_FILE = "state.json"
CHECK_INTERVAL = 120  # 2 –º–∏–Ω—É—Ç—ã

def send_telegram(text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
    if not BOT_TOKEN or not CHAT_ID:
        print("[WARN] BOT_TOKEN/CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text}
    try:
        r = httpx.post(url, data=payload, timeout=20)
        r.raise_for_status()
    except Exception as e:
        print(f"[ERROR] Telegram: {e}")

def fetch_html() -> str:
    """–ó–∞–≥—Ä—É–∑–∫–∞ HTML —Å —Å–∞–π—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫."""
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/127.0.0.1 Safari/537.36"
        )
    }
    try:
        r = httpx.get(URL, headers=headers, timeout=30)
        r.raise_for_status()
        return r.text
    except httpx.HTTPStatusError as e:
        print(f"[ERROR] HTTP –æ—à–∏–±–∫–∞ {e.response.status_code}: {e}")
    except httpx.RequestError as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
    except Exception as e:
        print(f"[ERROR] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    return ""

def parse_flats() -> Dict[str, str]:
    """–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–∫–∞–∂–¥–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞)."""
    html = fetch_html()
    if not html:
        return {}
    soup = BeautifulSoup(html, "html.parser")
    flats: Dict[str, str] = {}
    for table in soup.find_all("table"):
        for tr in table.find_all("tr"):
            cols = [td.get_text(" ", strip=True) for td in tr.find_all("td")]
            if len(cols) < 2:
                continue
            row_text = " | ".join(cols)
            flats[row_text] = row_text
    return flats

def load_state() -> Dict[str, str]:
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_state(state: Dict[str, str]) -> None:
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

def tick_once(first_run=False):
    old = load_state()
    new = parse_flats()
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if not new:
        print(f"[{ts}] –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É—é –ø–æ–∑–∂–µ")
        return

    if first_run:
        count = len(new)
        msg = f"üìä –ù–∞ —Å–∞–π—Ç–µ —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ {count} –∫–≤–∞—Ä—Ç–∏—Ä"
        print(f"[{ts}] –ü–µ—Ä–≤–∏—á–Ω—ã–π –∑–∞–ø—É—Å–∫: {msg}")
        send_telegram(msg)
    else:
        if old != new:
            diff = len(new) - len(old)
            if diff > 0:
                msg = f"üîîüì¢ –î–æ–±–∞–≤–ª–µ–Ω–æ {diff} –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä!"
            elif diff < 0:
                msg = f"üîî‚ùå –£–±—Ä–∞–Ω–æ {abs(diff)} –∫–≤–∞—Ä—Ç–∏—Ä!"
            else:
                msg = "üîî‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä!"
            print(f"[{ts}] {msg}")
            send_telegram(msg)
        else:
            print(f"[{ts}] –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

    save_state(new)

def main_loop():
    print(f"Watcher –∑–∞–ø—É—â–µ–Ω. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {CHECK_INTERVAL} —Å–µ–∫")
    tick_once(first_run=True)
    while True:
        time.sleep(CHECK_INTERVAL)
        tick_once()

if __name__ == "__main__":
    main_loop()
