import os
import time
import json
import re
import hashlib
import logging
import tempfile
from datetime import datetime
from typing import Dict, Optional
from collections import defaultdict

import httpx
from bs4 import BeautifulSoup
from zoneinfo import ZoneInfo   # –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
URL = "https://minsk.gov.by/ru/freepage/other/arendnoe_zhiljo/"
BOT_TOKEN = os.getenv("7660220912:AAEcwSBMJM88jyJkeNLScLi6LV2_-stzADM")
CHAT_ID = os.getenv("-1003097916199")
DATA_FILE = os.getenv("DATA_FILE", "/mnt/data/state.json")  # Railway Volume
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "240"))    # 4 –º–∏–Ω—É—Ç—ã
WORK_HOURS = (8, 20)  # –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ú–∏–Ω—Å–∫–∞
TIMEZONE = os.getenv("TZ", "Europe/Minsk")  # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
MAX_MSG_LEN = 4000

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)

# --- HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ ---
HEADERS = {
    "User-Agent": "Mozilla/5.0 (compatible; MinskWatcher/1.0)",
    "Accept-Language": "ru-RU,ru;q=0.9",
    "Referer": "https://minsk.gov.by/"
}

# --- –í—Ä–µ–º—è —Å —É—á—ë—Ç–æ–º —Ç–∞–π–º–∑–æ–Ω—ã ---
def now_local():
    return datetime.now(ZoneInfo(TIMEZONE))

# --- Telegram ---
def send_telegram(text: str) -> None:
    if not BOT_TOKEN or not CHAT_ID:
        logging.warning("BOT_TOKEN/CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID}

    chunks = [text[i:i+MAX_MSG_LEN] for i in range(0, len(text), MAX_MSG_LEN)]
    for chunk in chunks:
        for attempt in range(3):
            try:
                r = httpx.post(url, data={**payload, "text": chunk}, timeout=20)
                r.raise_for_status()
                break
            except Exception as e:
                logging.error(f"Telegram attempt {attempt+1}: {e}")
                time.sleep(2 ** attempt)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ HTML ---
def fetch_html() -> str:
    for attempt in range(3):
        try:
            r = httpx.get(URL, headers=HEADERS, timeout=(10, 20))
            r.raise_for_status()
            return r.text
        except Exception as e:
            logging.error(f"fetch_html attempt {attempt+1}: {e}")
            time.sleep(2 ** attempt)
    return ""

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def extract_last_number(text: str) -> Optional[str]:
    if not text:
        return None
    nums = re.findall(r"\d+[.,]?\d*", text)
    return nums[-1] if nums else text

def flat_hash(flat: Dict[str, str]) -> str:
    return hashlib.md5(json.dumps(flat, sort_keys=True, ensure_ascii=False).encode()).hexdigest()

# --- –ü–∞—Ä—Å–∏–Ω–≥ ---
def parse_flats() -> Dict[str, Dict[str, str]]:
    html = fetch_html()
    if not html:
        return {}

    soup = BeautifulSoup(html, "html.parser")
    flats: Dict[str, Dict[str, str]] = {}

    for block in soup.select("div.inside"):
        district_tag = block.find_previous("a", class_="ofside")
        district = district_tag.get_text(strip=True) if district_tag else None

        last_update = None
        upd = block.find_next("div", class_="org-status")
        if upd:
            m = re.search(r"–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\s*(\d{2}\.\d{2}\.\d{4})", upd.get_text())
            if m:
                last_update = m.group(1)

        article = None
        for p in block.find_all("p"):
            text = p.get_text()
            if "–ñ–∏–ª–∏—â–Ω–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞" in text:
                m = re.search(r"—Å—Ç–∞—Ç(—å—è|—å–∏)\s+(\d+)", text)
                if m:
                    article = f"—Å—Ç. {m.group(2)} –ñ–ö –†–ë"
                    break

        for table in block.find_all("table"):
            rows = table.find_all("tr")
            if len(rows) <= 1:
                continue
            headers = [th.get_text(" ", strip=True).lower() for th in rows[0].find_all(["td", "th"])]

            for idx, tr in enumerate(rows[1:], start=1):
                cols = [td.get_text(" ", strip=True) for td in tr.find_all("td")]
                if len(cols) < 2:
                    continue

                address = next((c for h, c in zip(headers, cols) if "–∞–¥—Ä–µ—Å" in h), None)
                if not address:
                    continue

                rooms = next((c for h, c in zip(headers, cols) if "–∫–æ–º–Ω" in h), None)
                area_total = None
                area_living = None
                rent = next((c for h, c in zip(headers, cols) if "–ø–ª–∞—Ç–∞" in h), None)
                repair = next((c for h, c in zip(headers, cols) if "—Ä–µ–º–æ–Ω—Ç" in h), None)
                appl = next((c for h, c in zip(headers, cols) if "–ø—Ä–∏—ë–º" in h or "–∑–∞—è–≤–ª–µ–Ω" in h), None)

                for h, c in zip(headers, cols):
                    if "–æ–±—â–∞—è" in h:
                        area_total = c
                    elif "–∂–∏–ª–∞—è" in h:
                        area_living = c

                rent = extract_last_number(rent)
                repair = extract_last_number(repair)

                if appl:
                    dates = re.findall(r"\d{2}\.\d{2}\.\d{4}", appl)
                    if len(dates) >= 2:
                        appl = f"{dates[0]} ‚Äì {dates[1]}"
                    elif len(dates) == 1:
                        appl = dates[0]

                # –∫–ª—é—á —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å–æ–º —Å—Ç—Ä–æ–∫–∏
                key = f"{(district or '').strip()}:{address.strip()}:{idx}"
                flat = {
                    "district": district,
                    "address": address,
                    "rooms": rooms,
                    "area_total": area_total,
                    "area_living": area_living,
                    "rent": rent,
                    "repair_cost": repair,
                    "application_period": appl,
                    "last_update": last_update,
                    "article": article,
                }
                flat["hash"] = flat_hash(flat)
                flats[key] = flat

    return flats

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ ---
def load_state() -> Dict[str, Dict[str, str]]:
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_state(state: Dict[str, Dict[str, str]]) -> None:
    try:
        with tempfile.NamedTemporaryFile("w", delete=False, encoding="utf-8") as tmp:
            json.dump(state, tmp, ensure_ascii=False, indent=2)
            tmp.flush()
            os.fsync(tmp.fileno())
            tmp_name = tmp.name
        os.replace(tmp_name, DATA_FILE)
    except Exception as e:
        logging.error(f"save_state: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
def tick_once(first_run=False):
    try:
        old = load_state()
        new = parse_flats()

        if not new:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é")
            return

        if first_run:
            msg_lines = [f"üìä –ù–∞ —Å–∞–π—Ç–µ —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ {len(new)} –∫–≤–∞—Ä—Ç–∏—Ä:"]
            grouped = defaultdict(list)
            for flat in new.values():
                grouped[flat.get("district") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω"].append(flat)

            for district, flats in grouped.items():
                msg_lines.append(f"\nüè¢ {district}")
                for flat in flats:
                    msg_lines.append(
                        f"üè† {flat.get('address')}\n"
                        f"   {flat.get('rooms') or ''}, {flat.get('area_total') or ''} –º¬≤\n"
                        f"   –ü–ª–∞—Ç–∞: {flat.get('rent') or '-'}\n"
                        f"   –†–µ–º–æ–Ω—Ç: {flat.get('repair_cost') or '-'}\n"
                        f"   –ü—Ä–∏—ë–º –∑–∞—è–≤–ª–µ–Ω–∏–π: {flat.get('application_period') or '-'}\n"
                        f"   üìñ {flat.get('article') or '—Å—Ç–∞—Ç—å—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                    )

            send_telegram("\n".join(msg_lines))
            logging.info("–ü–µ—Ä–≤–∏—á–Ω—ã–π –∑–∞–ø—É—Å–∫: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

                else:
            added, removed, changed = [], [], []

            for k, v in new.items():
                if k not in old:
                    added.append(v)
                elif v["hash"] != old[k].get("hash"):
                    changed.append(v)

            for k, v in old.items():
                if k not in new:
                    removed.append(v)

            if added or removed or changed:
                msg_lines = []

                if added:
                    msg_lines.append(f"üîîüì¢ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(added)} –∫–≤–∞—Ä—Ç–∏—Ä:")
                    for flat in added:
                        msg_lines.append(
                            f"üè† {flat.get('address')} "
                            f"({flat.get('rooms') or ''}, {flat.get('area_total') or ''} –º¬≤)"
                        )

                if removed:
                    msg_lines.append(f"\nüîî‚ùå –£–±—Ä–∞–Ω–æ {len(removed)} –∫–≤–∞—Ä—Ç–∏—Ä:")
                    for flat in removed:
                        msg_lines.append(
                            f"üè† {flat.get('address')} "
                            f"({flat.get('rooms') or ''}, {flat.get('area_total') or ''} –º¬≤)"
                        )

                if changed:
                    msg_lines.append(f"\nüîî‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ {len(changed)} –∫–≤–∞—Ä—Ç–∏—Ä:")
                    for flat in changed:
                        msg_lines.append(
                            f"üè† {flat.get('address')} "
                            f"({flat.get('rooms') or ''}, {flat.get('area_total') or ''} –º¬≤)"
                        )

                send_telegram("\n".join(msg_lines))
                logging.info(
                    f"–ò–∑–º–µ–Ω–µ–Ω–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(added)}, "
                    f"—É–±—Ä–∞–Ω–æ {len(removed)}, –∏–∑–º–µ–Ω–µ–Ω–æ {len(changed)}"
                )

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        save_state(new)

    except Exception as e:
        logging.exception(f"tick_once: –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---
def main():
    first = True
    while True:
        now = now_local()
        if WORK_HOURS[0] <= now.hour < WORK_HOURS[1]:
            tick_once(first_run=first)
            first = False
        else:
            logging.info("–í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        time.sleep(CHECK_INTERVAL)


if __name__ == "__main__":
    main()

